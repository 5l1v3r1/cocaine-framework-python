#!/bin/bash
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Anton Tyurin <noxiouz@yandex.ru>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
PID_PATH=/var/run/cocaine-tornado
USER="cocaine"
START_PORT=9080
TORNADO_COUNT=28
LOG=/var/log/cocaine-tornado/tornado.log
LOGLEVEL="info" # debug|info|warning|error|none
CONFIG=/etc/cocaine/cocaine-tornado-proxy.conf

if [ $2 ]; then
    TORNADO_COUNT=$2
fi

if [ ! -d "$PID_PATH" ]; then
  # Control will enter here if $DIRECTORY exists.
  echo "Create $PID_PATH"
  mkdir -p $PID_PATH
fi

do_start()
{   
    export PYTHONOPTIMIZE=x
    echo "Start $TORNADO_COUNT tornadoes with $APPS_COUNT endpoints per cocaine application"
    for (( i=1; i<=$TORNADO_COUNT; i++ ))
    do
       PIDFILE=$PID_PATH/tornado-proxy.$i 
       PORT=$(($START_PORT+$i))
       echo -n "Start $i on port $PORT and pid $PIDFILE"
       if [ $3 ]; then
            ARGS=" --count=$3 --port=$PORT --user=$USER --pidfile=$PIDFILE --logging=$LOGLEVEL --log_file_prefix=$LOG --config=$CONFIG"
       else
            ARGS=" --port=$PORT --count=10 --user=$USER --pidfile=$PIDFILE --logging=$LOGLEVEL --log_file_prefix=$LOG --config=$CONFIG"
       fi
       ulimit -n 65000; cocaine-tornado-proxy --daemon $ARGS start
       if [ $? -ne 0 ]; 
       then
             echo "FAIL"
       else
             echo "OK"
       fi
    done
}

#
# Function that stops the daemon/service
#
do_stop()
{
    PIDS=($(ls -1 $PID_PATH/ | grep tornado))
    if [ ${#PIDS[@]} -gt 0 ]; then
        for pid in "${PIDS[@]}"
        do
            PIDFILE=$PID_PATH/$pid
            cocaine-tornado-proxy --daemon --pidfile=$PIDFILE stop
        done
    else
        echo "There are no working processes"
    fi
}


case "$1" in
  start)
	do_start
	;;
  stop)
	do_stop
	;;
  status)
    ;;
  restart|force-reload)
	do_stop
    do_start
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart} [tornadoes_count] [applications count]" >&2
	exit 3
	;;
esac
